apply plugin: "com.android.application"

def manifest = new XmlSlurper().parse(file("src/main/AndroidManifest.xml"))
def appName = manifest.@package.toString()
def apkName = appName.split("\\.").last()

// Define paths used throughout the build process
def coronaEnterpriseDir = "$rootDir/CoronaEnterprise"
def assetsDir = "$projectDir/src/main/assets"
def jniLibsDir = "$projectDir/src/main/jniLibs"
def coronaEnterpriseMacBinDir = "$coronaEnterpriseDir/Corona/mac/bin"
def coronaEnterpriseSharedDir = "$coronaEnterpriseDir/Corona/shared"
def coronaEnterpriseAndroidLibDir = "$coronaEnterpriseDir/Corona/android/lib/Corona"

// Git automatic versioning
def gitVersionCode = "git rev-list master --count".execute().text.toInteger()
def gitVersionName = "git describe --tags --match [0-9]* --abbrev=0".execute().text.trim()
gitVersionName += " build " + gitVersionCode.toString();

android {
    compileSdkVersion 25
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "$appName"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode gitVersionCode
        versionName "$gitVersionName"
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // append build and version to apkName. replace " " with "-"
            def variantName = apkName + "-" + defaultConfig.versionName.collectReplacements({if (it==' ') {'-'}})
            def variantFile = output.outputFile.getPath().replace("/app-", "/${variantName}-")
            output.outputFileName = file(variantFile).name
        }
    }
}

task cleanAssets (type: Delete, description: "remove Corona assets and libcorona.so") {
    delete "$assetsDir"
    delete "$jniLibsDir"
    delete "$projectDir/build/intermediates/jniLibs"

    doFirst {
        println "== cleanAssets =="
    }

    doLast {
        new File("$assetsDir").mkdirs()
    }
}

task compileLua(type: Exec, description: "compile Lua source code") {
    executable = "$coronaEnterpriseMacBinDir/lua"
    workingDir = "$coronaEnterpriseMacBinDir"
    args = [
            "-e",
            "package.path='$coronaEnterpriseSharedDir/bin/?.lua;$coronaEnterpriseSharedDir/bin/?/init.lua;'..package.path",
            "$coronaEnterpriseSharedDir/bin/Compile.lua",
            "mac",
            "$coronaEnterpriseDir"
    ]

    environment = [
            LUA_CPATH                   : "$coronaEnterpriseMacBinDir/?.so",
            TARGET_PLATFORM             : "android",
            PROJECT_DIR                 : "$rootDir",
            CORONA_COPY_PNG_PRESERVE    : "--preserve",
            CONFIGURATION               : "release",
            CORONA_ASSETS_DIR           : "$rootDir/../Corona",
            CORONA_TARGET_RESOURCES_DIR : "$assetsDir",
            CORONA_TARGET_EXECUTABLE_DIR: "$assetsDir"
    ]

    dependsOn "cleanAssets"

    doFirst {
        println "== compileLua =="
    }
}

task copyCoronaResources(type: Copy) {
    from fileTree(dir: "$coronaEnterpriseAndroidLibDir/res", include: "**/*")
    into "$projectDir/src/main/res"

    dependsOn "compileLua"

    doFirst {
        println "== copyCoronaResources =="
    }
}

task copyCoronaNativeLibs(type: Copy) {
    from fileTree(dir: "$coronaEnterpriseAndroidLibDir/libs", include: "**/*.so")
    into "$jniLibsDir"

    dependsOn "copyCoronaResources"

    doFirst {
        println "== copyCoronaNativeLibs =="
    }
}

task certifyBuild(type: Exec, description: "certify libcorona.so with resource.car hash and developerkey.cert") {
    executable = "$coronaEnterpriseMacBinDir/CoronaBuilder.app/Contents/MacOS/CoronaBuilder"
    workingDir = "$coronaEnterpriseMacBinDir"
    args = [
            "app_sign",
            "sign",
            "$coronaEnterpriseSharedDir/resource/developerkey.cert",
            "$assetsDir/resource.car",
            "$jniLibsDir/armeabi-v7a/libcorona.so",
            "little"
    ]

    dependsOn "copyCoronaNativeLibs"

    doFirst {
        println "== certifyBuild =="
    }
}

tasks.preBuild.dependsOn("certifyBuild")

dependencies {
    implementation "com.android.support:appcompat-v7:25.2.0"
    implementation "com.android.support:recyclerview-v7:25.2.0"
    implementation "com.google.android.gms:play-services-base:11.4.2"
    implementation project(":plugin")
}
